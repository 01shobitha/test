<?xml version="1.0" encoding="UTF-8"?>
<chapter id="cmdline"><title id="tcmdline">
Advanced streaming using the command line</title>

<!-- TODO : 
      
    Update all this 
    Improve texts
    Video Filters
    update of syntax
    other modules ?
    gather
    

-->

<sect1><title>Structure of stream output</title>

<para>

Stream output is the name of the feature of VLC that allows to output
any stream read by VLC to a file or as a network stream instead of
displaying it. Different kind of processing can be applied to the stream
during this process (transcoding, re-scaling, filters, re-muxing...)

Stream output includes different modules, each of them having different
capabilities. You can <emphasis>chain</emphasis> modules to enhance the
possibilities. </para>

<para>
Here is the list of the modules currently available:
</para>

<itemizedlist>

<listitem><para><emphasis>standard</emphasis>
allows to <emphasis>send</emphasis> the stream via an <emphasis>access
output</emphasis> module: for example, UDP, file, HTTP, ... You will
probably want to use this module at the end of your chains.

</para></listitem>

<listitem><para><emphasis>transcode</emphasis> is used to transcode
(decode and re-encode the stream using a different codec and/or bitrate)
the audio and the video of the input stream. If the input or output
access method doesn't allow pace control (network, capture devices),
this done "on the fly", in real time. This can require quite a lot
of CPU power, depending on the parameters set. Other streams, such
as files and disks are transcoded as fast as the system allows it.
</para></listitem>

<listitem><para><emphasis>duplicate</emphasis>
allows you to create a second chain, where the
stream will be handled in an independent way.
</para></listitem>

<listitem><para><emphasis>display</emphasis> 
allows you to display the input stream, as VLC
would normally do. Used with the <emphasis>duplicate</emphasis>
module, this allows you to monitor the stream while processing it.
</para></listitem>

<listitem><para><emphasis>rtp</emphasis> streams over RTP (one UDP port
for each elementary stream). This module also allows RTSP support.
</para></listitem>

<listitem><para><emphasis>es</emphasis> allows you to make separate
Elementary Streams (ES) out of an input stream. This can be used
to save audio and video streams to separate files, for instance.
</para></listitem>

</itemizedlist>

<para>
Each of these modules may take options. Here is the
syntax that you must use:
</para>

<screen>
<prompt>% </prompt><userinput>vlc input_stream --sout "#module1{option1=parameter1{parameter-option1},option2=parameter2}:module2{option1=...,option2=...}:..."</userinput>
</screen>

<note><para>Some of the module options (option1 in the example) have to
be set, others are optional. Option parameters (parameter-option1 in the
example) are always optional. These option parameters are also often
very advanced settings. If you don't understand their description, this
certainly means that you don't need them.</para></note>

<para>
You may also use the following syntax :
</para>

<screen>
<prompt>% </prompt><userinput>vlc input_stream --sout-module1-option1=... --sout-module1-option2=... --sout-module2-option1=... --sout-module2-option2=... ...</userinput>
</screen>

<para>
For example, to transcode a stream and send it, use:
</para>

<screen>
<prompt>% </prompt><userinput>vlc input_stream --sout '#transcode{options}:standard{options}'</userinput>
</screen>

</sect1>

<sect1><title>Description of the modules</title>

<sect2><title>standard (alias std)</title>

<para>
This module saves the stream to a file or sends it over a network, after
having muxed it.
</para>

<para>The available options are:</para>

<sect3><title>access=</title>

<para>This option allows to set the medium used to save or send the stream. This is a compulsory option. Available options are:</para>

<itemizedlist>
<listitem><para>file: saves the stream to a file.</para>
<para>Use the <emphasis>append</emphasis> option to append the stream to an existing file instead of replacing it.</para></listitem>

<listitem><para>udp: streams to a UDP unicast or multicast
address.</para>
<para>Item options are: <emphasis>caching=&lt;time in
ms&gt;</emphasis> to set the time VLC should buffer data before sending
it, <emphasis>ttl=&lt;ttl&gt;</emphasis> to set the ttl of the sent udp
packets, <emphasis>group=&lt;amount of packets&gt;</emphasis> to sent
packets by burst instead of one by one, <emphasis>late=&lt;time in
ms&gt;</emphasis> to drop packets that arrive too late at this stage of
the chain, <emphasis>raw</emphasis> if you don't want to wait until the
MTU is filled before sending the packet.</para> </listitem>

<listitem><para>http: streams over HTTP.</para> <para>Item
options are: <emphasis>user=&lt;user name&gt;</emphasis>
to enable HTTP basic authentication and set the user,
<emphasis>pwd=&lt;password&gt;</emphasis> to set the basic
authentication password, <emphasis>mime=&lt;mime type&gt;</emphasis>
to set the mime type returned by the server.</para></listitem>

<listitem><para>https: streams over HTTP, using a secured SSL
connection.</para>

<para>Item options are the same as for http and: <emphasis>cert=&lt;path
to certificate&gt;</emphasis>to set the certificate to use,
<emphasis>key=&lt;path to key&gt;</emphasis> to set the private key file
the server should use for the SSL connection, <emphasis>ca=&lt;path
to certificate&gt;</emphasis> to set the path to the root
CA certificates to use for SSL, <emphasis>crl=&lt;path to
certificate&gt;</emphasis> to set the revocation certificate to use for
the SSL connection.</para></listitem>

<listitem><para>mmsh: streams using the Microsoft MMS protocol. This
protocol is used as transport method by many Microsoft's softwares.
Note that only a small part of the MMS protocol is supported (MMS
encapsulated in HTTP).</para>
<para>Item options are the same as for the http module.</para></listitem>

<listitem><para>rtp: streams over RTP
This can only be used to stream MPEG-TS over plain RTP.
Support for this option has been removed in VLC 0.9.0 and latter.
You should use the <emphasis>rtp</emphasis> stream output module instead.
Options are the same as for the <emphasis>udp</emphasis> setting.</para>
</listitem>

</itemizedlist>
</sect3>
<sect3><title>mux=</title>
<para> This option allows you to set the encapsulation method used for the resulting stream. This option has to be set.</para>

<para>Available options are: </para>

<itemizedlist>
<listitem><para><emphasis>ts:</emphasis> the MPEG2/TS muxer. This the
standard muxer used to stream MPEG 2. This muxer can be used with any
<emphasis>access</emphasis> method. Supported codecs are MPEG 1/2/4,
MJPEG, H263, H264, I263, WMV 1/2 and theora for video, MPEG audio, AAC and
a52 for the audio stream.</para>

<para>Item options are: <emphasis>pid-video=&lt;pid&gt;</emphasis>
to set the PID of the video track,
<emphasis>pid-audio=&lt;pid&gt;</emphasis> to set the PID of the audio
track, <emphasis>pid-spu=&lt;pid&gt;</emphasis> to set the PID of the
subtitle track, <emphasis>pid-pmt=&lt;pid&gt;</emphasis> to set the PID
of the PMT (Program Map Table), <emphasis>tsid=&lt;id&gt;</emphasis> to
set the ID of the resulting TS stream, <emphasis>shaping=&lt;shaping
delay in ms&gt;</emphasis> to set the minimum interval during
which the bitrate of the stream will remain constant, for variable
bitrate streams, <emphasis>use-key-frames</emphasis> uses I frames
as limits for the shaping intervals, <emphasis>pcr=&lt;PCR interval
in ms&gt;</emphasis> allows to set at which interval Program
Clock References will be sent, <emphasis>dts-delay=&lt;delay
in ms&gt;</emphasis> allows to delay PTS (Presentation Time
Stamps) from the DTS (Decoding Time Stamp) from the given time,
<emphasis>crypt-audio</emphasis> allows to enable encryption of the
audio track using the CSA algorithm, <emphasis>csa-ck=&lt;key as a
16 character word&gt;</emphasis> allows to set the key used for CSA
encryption.</para></listitem>

<listitem><para><emphasis>ps:</emphasis> the MPEG2/PS muxer. This the standard muxer for MPEG
2 files(.mpg). It can be used with the file and http output methods.
Supported codecs are MPEG 1/2 and MJPEG for video, MPEG audio and a52 for
audio streams.</para>

<para>The only available item option is <emphasis>dst-delay=&lt;delay
in ms&gt;</emphasis>. It allows to delay PTS (Presentation
Time Stamps) from the DTS (Decoding Time Stamp) from the given
time.</para></listitem>

<listitem><para><emphasis>mpeg1:</emphasis> the standard MPEG 1 muxer. This muxer should be
used instead of ps with MPEG 1 video streams, when saved to a file or
streamed over HTTP. Supported codecs are MPEG 1 and MPEG audio.</para>
<para>Items options are the same as for the PS muxer.</para></listitem>

<listitem><para><emphasis>ogg:</emphasis> the ogg muxer. This is the muxer from the Xiph
project. It can be used with the HTTP and file output methods. Supported
codecs are MPEG 1/2/4, MJPEG WMV 1/2 and Theora, audio streams can be vorbis,
flac, speex, a52 or MPEG audio.</para>
<para>There is no item option for this muxer.</para></listitem>

<listitem><para><emphasis>asf:</emphasis> the Microsoft ASF muxer. This is the standard muxer
used for streaming by Microsoft's softwares. Is also used as container
for WMA audio files. This muxer can be used with the file and HTTP
output methods. Supported codecs are MPEG 4, MJPEG, WMV 1/2 for video,
MPEG audio, a52 for audio streams.</para>

<para>Item options are: 
<emphasis>title=&lt;title&gt;</emphasis>,
<emphasis>autor=&lt;author&gt;</emphasis>,
<emphasis>copyright=&lt;copyright message&gt;</emphasis>,
<emphasis>comment=&lt;comments&gt;</emphasis>,
<emphasis>rating=&lt;rating&gt;</emphasis> allow you to set what will be displayed in the according field of the stream comments.</para></listitem>

<listitem><para><emphasis>asfh:</emphasis> this is a special version of the ASF muxer, that
should be used for MMSH streaming. MMSH is the only supported output
method. Supported codecs are the same as for ASF.</para>
<para>Item options are the same as for ASF.</para></listitem>

<listitem><para><emphasis>avi:</emphasis> the Microsoft AVI muxer. This is very common
encapsulation format for MPEG 4 files. The only supported output method
is file. Supported codecs are MPEG 1/2/4, H263, H264 and I263 for video,
MPEG audio and a52 for audio streams.</para>
<para>There is not item option for this muxer.</para></listitem>

<listitem><para><emphasis>mpjpeg:</emphasis> the multipart jpeg muxer.
This encapsulation format is mostly used on surveillance video cameras
with an integrated web-server. Such streams are usually embedded in
web-pages and seen with standard Internet browsers, as they are seen
as a succession of jpeg images. The only supported output method is
HTTP. The only usable codec is MJPEG. No sound track can be muxed
in such streams.</para> <para>No item option is available for this
muxer.</para></listitem>

</itemizedlist>
</sect3>

<sect3><title>dst=</title>

<para>This option allows to give informations about the location
where the stream should actually be saved or sent.</para>

<para>Here is the meaning of the <emphasis>dst</emphasis> option
depending on the parameter used for the <emphasis>access</emphasis>
option.</para>

<itemizedlist>
<listitem><para>If the <emphasis>file</emphasis> output method is used, dst is
the complete path where the file should be saved.</para></listitem>

<listitem><para>If the <emphasis>udp</emphasis> or <emphasis>rtp</emphasis>
output method is used, dst is the unicast or multicast
destination address and, optionally, UDP port, in the form
<emphasis>address:port</emphasis>.</para></listitem>

<listitem><para>If the <emphasis>http</emphasis>,
<emphasis>https</emphasis> or <emphasis>mmsh</emphasis> output method is
chosen, dst is the address, port and path of the local network interface
on which the server should listen for requests. If no address is given,
VLC will listen on all the network interfaces. These information
have to be supplied using the <emphasis>address:port/path</emphasis>
syntax.</para></listitem>

</itemizedlist>

</sect3>

<sect3><title>sap</title>

<para>Use this option if you want VLC to send SAP (Session Announcement
Protocol) announces. SAP is a service discovery protocol, that uses
a special multicast address to send a list of available streams on a
server.</para>

<note><para>This option can only be enabled with the <emphasis>udp</emphasis>
output method.</para></note>

</sect3>

<sect3><title>group=</title>

<para>This option allows to specify the name of an optional <emphasis>group</emphasis> of streams. A VLC used as a client will use this field to classify the stream.</para>

<note><para>This option uses a private extension of the SAP protocol.
VLC will be the only client able to read this field.</para>

<para>This option can only be used it the <emphasis>sap</emphasis>
option has been enabled.</para></note>

</sect3>

<sect3><title>sap-ipv6</title>

<para>Use this option if you want the SAP announces to be sent using the
<emphasis>IPv6</emphasis> protocol instead of <emphasis>IPv4</emphasis>.</para>

<note><para>This option can only be used it the <emphasis>sap</emphasis>
option has been enabled.</para></note>

</sect3>

<sect3><title>slp</title>

<para>SLP stands for <emphasis>Service Location Protocol</emphasis>. It is an alternative to SAP for session announcement. Use this option if you want to send such announces.</para>

</sect3>

<sect3><title>name=</title>

<para>Use this option to specify the name of the stream that will be sent in SAP and SLP announces.</para>

<note><para>This option can only be used it the <emphasis>sap</emphasis>
or <emphasis>slp</emphasis> option has been enabled.</para></note>

</sect3>

</sect2>

<sect2><title>display</title>

<para> This module can be used to display the stream. This is
particularly useful in a <emphasis>duplicate</emphasis> chain, in order
to monitor a stream while it is being saved or streamed. </para>

<para>available options are:</para>

<sect3><title>novideo</title>

<para>You can use this option to disable video in the displayed stream.</para>

</sect3>

<sect3><title>noaudio</title>

<para>You can use this option to disable audio in the displayed stream.</para>

</sect3>

<sect3><title>delay=</title>

<para>You can use this option to introduce a delay in the display of the stream. Delay has to be given in ms.</para>

</sect3>

</sect2>

<sect2><title>rtp</title>

<para>This module can be used to send a stream using the <emphasis>RTP
(Real Time Protocol)</emphasis> protocol (see RFC 3550).</para>

<note><para>Although use of <emphasis>RTSP</emphasis> is possible using
this module, it won't allow you to make Video On demand. Please have a
look at the description of the VLM module for that.</para></note>

<para>The different available options are:</para>

<sect3><title>dst=</title>

<para>This option allow to give the destination IP address
(for UDP and UDP-Lite) or the listening IP address (for DCCP, SCTP and TCP).
It can be a host address or a multicast group address.
</para>

</sect3>

<sect3><title>port-video=</title>

<para>This option defines the port number
the first video <emphasis>elementary stream</emphasis> will be sent to.
This port has to be even.</para>

</sect3>

<sect3><title>port-audio=</title>

<para>This option defines the port number
the first audio <emphasis>elementary stream</emphasis> will be sent to.
This port has to be even.</para>

</sect3>

<sect3><title>port=</title>

<para>This option specifies which port number
the first other <emphasis>elementary stream</emphasis> will be sent to.
This port has to be even.
Other streams will be streamed using even ports directly above this one.</para>

</sect3>


<sect3><title>sdp=</title>

<para>This option allows to set the way the SDP (Session Description Protocol) file corresponding the the stream should be made available.</para>

<para>Options are:</para>

<itemizedlist>

<listitem><para><emphasis>file://&lt;path to the file&gt;</emphasis>, to
export the SDP as a local file</para></listitem>

<listitem><para><emphasis>http://&lt;local interface
IP:port/path&gt;</emphasis>, to make the file available using the
integrated HTTP server of VLC.</para>

<note><para>The <emphasis>local interface IP</emphasis> argument
is optional. If not given, VLC will listen on all available
interfaces.</para></note></listitem>

<listitem><para><emphasis>rtsp://&lt;local interface
IP:port/path&gt;</emphasis>, to make the SDP file available using the
<emphasis>RTSP</emphasis> protocol (see RFC 2326).</para>

<note><para>The <emphasis>local interface IP</emphasis> argument
is optional. If not given, VLC will listen on all available
interfaces.</para></note></listitem>

<listitem><para><emphasis>sap</emphasis>, to export the SDP using the
SAP (Session Announcement Protocol, see RFC 2974).</para></listitem>

</itemizedlist>

</sect3>

<sect3><title>ttl=</title>

<para>This option can be used to set the <emphasis>TTL</emphasis> (Time
to Live) of the sent UDP packets.</para>

</sect3>

<sect3><title>mux=</title>

<para>This option allows to set the encapsulation method used to
send the stream. See <emphasis>mux=</emphasis> options of the
<emphasis>standard</emphasis> module for a description of the available
method.
Only <emphasis>ts</emphasis> is possible for RTP streams.
By default, each elementary stream is sent as a separate RTP media,
i.e. no encapsulation is done.
</para>

</sect3>

<sect3><title>rtcp-mux</title>

<para>This options enables RTP/RTCP multiplexing
(see draft-ietf-avt-rtp-and-rtcp-mux),
i.e. sends and receives RTCP packets on the same port numbers as RTP packets.
By default, RTCP packets are sent and received on the next port.
</para>

</sect3>

<sect3><title>proto=</title>

<para>This selects the transport protocol to carry RTP packets.
Possible values include:
</para>
<itemizedlist>

<listitem><para><emphasis>dccp</emphasis>:
accept incoming DCCP connections at the specified IP address (dst=),
</para></listitem>

<listitem><para><emphasis>sctp</emphasis>:
accept SCTP connections at the specified IP address (dst=),
not implemented yet,
</para></listitem>

<listitem><para><emphasis>tcp</emphasis>:
accept TCP connections at the specified IP address (dst=)
and use RFC4571 RTP framing, not implemented yet,
</para></listitem>

<listitem><para><emphasis>udp</emphasis>:
send UDP packets to the specified destination
(either unicast or multicast)
- this is the default value,
</para></listitem>

<listitem><para><emphasis>udplite</emphasis>:
send UDP-Lite packets to the specified destination
(either unicast or multicast).
</para></listitem>


</itemizedlist>

</sect3>

<sect3><title>name=</title>

<para>This option can be used to set the name that will be displayed on
the client receiving the stream.</para>

</sect3>

<sect3><title>description=</title>

<para>This option can be used to give an additional description of the
stream.</para>

</sect3>

<sect3><title>url=</title>

<para>This option allows to give the address of a website with
additional informations about the stream.</para>

</sect3>

<sect3><title>email=</title>

<para>This options allows to give a contact e-mail address</para>

</sect3>

</sect2>

<sect2><title>es</title>

<para>The <emphasis>es</emphasis> module can be used to separate the
different <emphasis>elementary streams</emphasis> from a stream,
and save each of them in a different file or send it to a separate
destination.</para>

<para>The available parameters are:</para>

<sect3><title>access-video=</title>

<para>Use this option to set the medium used to save or send the video
<emphasis>elementary streams</emphasis>. Possible values and item
options are the same as for the <emphasis>access</emphasis> option of
the <emphasis>standard</emphasis> module (see above).</para>

</sect3>

<sect3><title>access-audio=</title>

<para>Use this option to set the medium used to save or send the audio
<emphasis>elementary streams</emphasis>. Possible values and item
options are the same than for the <emphasis>access</emphasis> option of
the <emphasis>standard</emphasis> module (see above).</para>

</sect3>

<sect3><title>access=</title>

<para>This option can be used instead of both
<emphasis>access-video</emphasis> and <emphasis>access-audio</emphasis>
options, when they share the same setting.</para>

</sect3>

<sect3><title>mux-video=</title>

<para>Use this option to set the encapsulation method used for the
video <emphasis>elementary streams</emphasis>. Possible values and item
options are the same as for the <emphasis>mux</emphasis> option of
the <emphasis>standard</emphasis> module (see above).</para>

</sect3>

<sect3><title>mux-audio=</title>

<para>Use this option to set the encapsulation method used for the
audio <emphasis>elementary streams</emphasis>. Possible values and item
options are the same than for the <emphasis>mux</emphasis> option of the
<emphasis>standard</emphasis> module (see above).</para>

</sect3>

<sect3><title>mux=</title>

<para>This option can be used instead of both
<emphasis>mux-video</emphasis> and <emphasis>mux-audio</emphasis>
options, when they share the same setting.</para>

</sect3>

<sect3><title>dst-video=</title>

<para>Use this option to set the location where the video
<emphasis>elementary streams</emphasis> should be saved, sent, or made
available. The exact meaning of this option depends on the value of the
<emphasis>access-video</emphasis> option and is the same as for the
<emphasis>url</emphasis> option of the <emphasis>standard</emphasis>
module (see above).</para>

<note><para>If you use the <emphasis>%d</emphasis> string in the url
field, VLC will replace it by the number of the audio or video track
considered. The <emphasis>%c</emphasis> string will be replaced by the
name (FOURCC) of the codec of the track.</para></note>

</sect3>

<sect3><title>dst-audio=</title>

<para>Use this option to set the location where the audio
<emphasis>elementary streams</emphasis> should be saved, sent, or made
available. The exact meaning of this option depends on the value of the
<emphasis>access-audio</emphasis> option and is the same as for the
<emphasis>url</emphasis> option of the <emphasis>standard</emphasis>
module (see above).</para>

<note><para>If you use the <emphasis>%d</emphasis> string in the url
field, VLC will replace it by the number of the audio or video track
considered. The <emphasis>%c</emphasis> string will be replaced by the
name (FOURCC) of the codec of the track.</para></note>


</sect3>

<sect3><title>dst=</title>

<para>This option can be used instead of both
<emphasis>dst-video</emphasis> and <emphasis>dst-audio</emphasis>
options, when they share the same setting.</para>

</sect3>

</sect2>

<sect2><title>transcode</title>

<para>You can use this module to transcode a stream, i.e. to change its
codecs or the encoding bitrates. Some additional processing can be done
during this process, such as re-scaling, deinterlacing, resampling,
etc.</para>

<note><para>Depending on the bitrate of the original stream and of
the options chosen, transcoding can be a very CPU intensive task. As
a consequence, streaming of a real time transcoded stream can lead to
dropped frames or a jerky image and sound in some cases, when running
out of resources.</para></note>

<para>Available options are:</para>

<sect3><title>vcodec=</title>

<para>This options allows to specify the codec the video tracks of the
input stream should be transcoded to.</para>

<para>List of available codecs can be found on the 
<ulink url="/streaming/features.html">streaming features page</ulink>.</para>

</sect3>

<sect3><title>vb=</title>

<para>This option allows to set the bitrate of the transcoded video
stream, in kbit/s</para>

</sect3>

<sect3><title>venc=</title>

<para>This allows to set the encoder to use to encode the videos stream. Available options are:</para>
<itemizedlist>

<listitem><para><emphasis>ffmpeg</emphasis>: this is the libavcodec encoding
module. It handles a large variety of different codecs (the list can be
found on the <ulink url="/streaming/features.html">streaming features
page</ulink>.</para>

<para>Item options are: <emphasis>keyint=&lt;number of
frames&gt;</emphasis> allows to set the maximal amount of frames
between 2 key frames, <emphasis>hurry-up</emphasis> allows the
encoder to decrease the quality of the stream if the CPU can't keep
up with the encoding rate, <emphasis>interlace</emphasis> allows
to improve the quality of the encoding of interlaced streams,
<emphasis>noise-reduction=&lt;noise reduction factor&gt;</emphasis>
enables a noise reduction algorithm (will decrease required bitrate at
the cost of details in the image), <emphasis>vt=&lt;bitrate tolerance
in kbit/s&gt;</emphasis> allows to set a tolerance for the bitrate of
the outputted video stream, <emphasis>bframes=&lt;amount of frames&gt;
</emphasis> allows to set the amount of B frames between 2 key frames,
<emphasis>qmin=&lt;quantizer&gt;</emphasis> allows to set the minimum
quantizer scale, <emphasis>qmax=&lt;quantizer&gt;</emphasis> allows
to set the maximum quantizer scale, <emphasis>qscale=&lt;quantizer
scale&gt;</emphasis> allows to specify a fixed quantizer scale
for VBR encodings, <emphasis>i-quant-factor=&lt;quantization
factor&gt;</emphasis> allows to set the quantization factor of I
frames, compared to P frames, <emphasis>hq=&lt;quality&gt;</emphasis>
allows to choose the quality level for the encoding of the motion
vectors (arguments are simple, rd or bits, default is simple
*FIXME*), <emphasis>strict=&lt;level of compliance&gt;</emphasis>
allows to force a stricter standard compliance (possible values are
-1, 0 and 1, default is 0), <emphasis>strict-rc</emphasis> enables
a strict rate control algorithm, <emphasis>rc-buffer-size=&lt;size
of the buffer in bits&gt;</emphasis> allows to choose the size of
the buffer used for rate control (bigger means more efficient rate
control), <emphasis>rc-buffer-aggressivity=&lt;float representing the
aggressiveness&gt;</emphasis> allows to set the rate control buffer
aggressiveness *FIXME*, <emphasis>pre-me</emphasis> allows to enable pre
motion estimation, <emphasis>mpeg4-matrix</emphasis> enable use of the
MPEG4 quantization matrix with MPEG2 streams, improving quality while
keeping compatibility with MPEG2 decoders, <emphasis>trellis</emphasis>
enables trelli quantization (better quality, but slower
processing).</para></listitem>

<listitem><para><emphasis>theora</emphasis>: The Xiph.org theora encoder.
The module is used to produce theora streams. Theora is a free patent
and royalties free video codec.</para>

<para>The only available item option is <emphasis>quality=&lt;quality
level&gt;</emphasis>. This option allows to create a VBR stream,
overriding <emphasis>vb</emphasis> setting. the quality level must be an
integer between 1 and 10. Higher is better.</para></listitem>

<listitem><para><emphasis>x264</emphasis>. x264 is a free open-source h264 encoder. h264 (or MPEG4-AVC) is a quite recent high quality video codec.</para>

<para>Item options are: <emphasis>keyint=&lt;number of
frames&gt;</emphasis> allows to set the maximal amount of
frames between 2 key frames, <emphasis>idrint=&lt;number of
frames&gt;</emphasis> allows to set the maximal amount of frames
between 2 IDR frames, <emphasis>bframes=&lt;amount of frames&gt;
</emphasis> allows to set the amount of B frames between an I and
a P frame, <emphasis>qp=&lt;quantizer parameter&gt;</emphasis>
allows to specify a fixed quantizer (between 1 and 51),
<emphasis>qp-max=&lt;quantizer parameter&gt;</emphasis> allows to set
the maximum value for the quantizer, <emphasis>qp-min=&lt;quantizer
parameter&gt;</emphasis> allows to set the minimum value for
the quantizer, <emphasis>cabac</emphasis> enables the CABAC
(Context-Adaptive Binary Arithmetic Coding) algorithm (slower,
but enhances quality), <emphasis>loopfilter</emphasis> enables
deblocking loop filter, <emphasis>analyse</emphasis> enables the
analyze mode, <emphasis>frameref=&lt;amount of frames&gt;</emphasis>
allows to set the number of previous frames used as predictors,
<emphasis>scenecut=&lt;sensibility&lt;</emphasis> allows to control
how aggressively the encoder should insert extra I-frame, on scene
change.</para></listitem>

</itemizedlist>

</sect3>

<sect3><title>fps=</title>

<para>This options allows to set the framerate of the transcoded
video, in frame per second. reducing the framerate of a video can help
decreasing its bitrate.</para>

</sect3>

<sect3><title>deinterlace</title>

<para>This option allows to enable deinterlacing of interlaced video
streams before encoding.</para>

</sect3>

<sect3><title>croptop=</title>

<para>This option allows to crop the upper part of the source video while
transcoding. The argument is the number of lines the video should be
cropped.</para>

</sect3>

<sect3><title>cropbottom=</title>

<para>This option allows to crop the lower part of the source video. The
argument is the Y coordinate of the first line to be cropped.</para>

</sect3>

<sect3><title>cropleft</title>

<para>This option allows to crop the left part of the source video while
transcoding. The argument is the number of columns the video should be
cropped.</para>

</sect3>

<sect3><title>cropright=</title>

<para>This option allows to crop the right part of the source video. The
argument is the X coordinate of the first column to be cropped.</para>

</sect3>

<sect3><title>scale=</title>

<para>This option allows the give the ratio from which the video should
be rescaled while being transcoded. This option can be particularly
useful to help reduce the bitrate of a stream.</para>

</sect3>

<sect3><title>width=</title>

<para>This options allows to give the width of the transcoded video in
pixels.</para>

</sect3>

<sect3><title>height</title>

<para>This options allows to give the height of the transcoded video,
in pixels.</para>

</sect3>

<sect3><title>acodec=</title>

<para>This options allows to specify the codec the audio tracks of the
input stream should be transcoded to.</para>

<para>List of available codecs can be found on the
<ulink url="/streaming/features.html">streaming features page</ulink>.</para>

</sect3>

<sect3><title>ab=</title>

<para>This option allows to set the bitrate of the transcoded audio
stream, in kbit/s</para>

</sect3>

<sect3><title>aenc=</title>

<para>This allows to set the encoder to use to encode the audio stream.
Available options are:</para>

<itemizedlist>

<listitem><para><emphasis>ffmpeg</emphasis>: this is the libavcodec encoding
module. It handles a large variety of different codecs (the list can be
found on the <ulink url="/streaming/features.html">streaming features
page</ulink>.</para></listitem>

<listitem><para><emphasis>vorbis</emphasis>. This module uses the vorbis
encoder from the Xiph.org project. Vorbis is a free, open, license-free
lossy audio codec.</para>

<para>Item options are: <emphasis>quality=&lt;quality
level&gt;</emphasis> allows to use VBR (variable bitrate)
encoding instead of the default CBR (constant bitrate), and
to set the quality level (between 1 and 10, higher is better),
<emphasis>max-bitrate=&lt;bitrate in kbit/s&gt;</emphasis> allows to set
the maximum bitrate, for vbr encoding, <emphasis>min-bitrate=&lt;bitrate
in kbit/s&gt;</emphasis> allows to set the minimum bitrate,
for vbr encoding, <emphasis>cbr</emphasis> allows to force cbr
encoding.</para></listitem>

<listitem><para><emphasis>speex</emphasis>. This module uses the speex
encoder from the Xiph.org project. Speex is a lossy audio codec, best
fit for very low bitrates (around 10 kbit/s) and particularly video
conference.</para></listitem>

</itemizedlist>

</sect3>

<sect3><title>samplerate=</title>

<para>This option allows to set the samplerate of the transcoded audio
stream, in Hz. Reducing the samplerate is be a way to lower the bitrate
of the resulting audio stream.</para>

</sect3>

<sect3><title>channels=</title>

<para>This option allows to set the number of channels of the resulting
audio stream. This is useful for codecs that don't have support for more
than 2 channels, of to lower the bitrate of an audio stream.</para>

</sect3>

<sect3><title>scodec=</title>

<para>This options allows to specify subtitle format the subtitles
tracks of the input stream should be converted to.</para>

<para>List of available codecs can be found on the
<ulink url="/streaming/features.html">streaming features page</ulink>.</para>

</sect3>

<sect3><title>senc=</title>

<para>This allows to set the converter to use to encode the subtitle
stream.</para>

<para>The only subtitle encoder we have at this time is
<emphasis>dvbsub</emphasis>.</para>

</sect3>

<sect3><title>soverlay</title>

<para>This option allow to render subtitles directly on the video,
while transcoding it. Do not confuse this option with senc/scodec that
transcode the subtitles and streams them</para>

</sect3>

<sect3><title>sfilter=</title>

<para>This option allows to render some images generated by a so called
<emphasis>subpicture filter</emphasis> (e.g. a logo, a text string,
etc) on top of the video.</para>

<para>List of available <emphasis>subpicture filters</emphasis> can be
found on the <ulink url="http://www.videolan.org/streaming/features.html">streaming features
page</ulink>. The Item options of this modules can be found using the following command line:</para>

<screen>
<prompt>% </prompt><userinput>vlc -p --advanced &lt;module name&gt;</userinput>
</screen>

</sect3>

<sect3><title>threads=</title>

<para>This options allows to set the amount of threads that should
be used to encode the streams. Increasing this number to the amount
of processors on the computer, (or twice this number on Intel P4 HT
processors) should improve transcoding performance.</para>

</sect3>

<sect3><title>audio-sync</title>

<para>When this option is enabled, VLC will drop/duplicate video frames to synchronize the video track on the audio track.</para>

</sect3>

</sect2>

<sect2><title>duplicate</title>

<para>This module can be used to duplicate the stream, and so process it
through several different chains.</para>

<para>Available options are:</para>


<sect3><title>dst=</title>

<para>This options allows to give the chain through which the duplicated stream should be processed.</para>

<note><para>Several <emphasis>dst=</emphasis> options have to be used in the same duplicate block to actually duplicate the stream.</para>
<para>Any of the stream output module described earlier can be used as parameter of this option.</para></note>

</sect3>

<sect3><title>select=</title>

<para>This options can be used to duplicate only a part
<emphasis>elementary streams</emphasis> of a complete stream.</para>

<para>Several criteria can be given, by separating each of them with a
comma.</para>

<para>For criteria that need a parameter, such as
<emphasis>es</emphasis> and <emphasis>program</emphasis>,
you can also specify a range, using the syntax
<emphasis>criteria=num_start-num_end</emphasis>.</para>

<para>Available parameters are:</para>

<itemizedlist>

<listitem><para><emphasis>program=</emphasis>: duplicate only
<emphasis>elementary streams</emphasis> belonging to the
selected program (or SID). This option only works with MPEG2/TS
streams.</para></listitem>

<listitem><para><emphasis>noprogram=</emphasis>: do not duplicate
<emphasis>elementary streams</emphasis> belonging to the
selected program (or PID). This option only works with MPEG2/TS
streams.</para></listitem>

<listitem><para><emphasis>es=</emphasis>: duplicate only the
<emphasis>elementary stream</emphasis> with the selected
id.</para></listitem>

<listitem><para><emphasis>noes=</emphasis>: do not duplicate
the <emphasis>elementary stream</emphasis> with the selected
id.</para></listitem>

<listitem><para><emphasis>video</emphasis>: duplicate only video
<emphasis>elementary streams</emphasis>.</para></listitem>

<listitem><para><emphasis>novideo</emphasis>: do not duplicate video
<emphasis>elementary streams</emphasis>.</para></listitem>

<listitem><para><emphasis>audio</emphasis>: duplicate only audio
<emphasis>elementary streams</emphasis>.</para></listitem>

<listitem><para><emphasis>noaudio</emphasis>: do not duplicate audio
<emphasis>elementary streams</emphasis>.</para></listitem>

<listitem><para><emphasis>spu</emphasis>: duplicate only subtitle
<emphasis>elementary streams</emphasis>.</para></listitem>

<listitem><para><emphasis>nospu</emphasis>: do not duplicate subtitle
<emphasis>elementary streams</emphasis>.</para></listitem>

</itemizedlist>

<para>Example:</para>
<screen>#duplicate{dst=std{...},select="program=100-200,novideo"}</screen>

<para>This <emphasis>duplicate</emphasis> chain will only output the non
video <emphasis>elementary streams</emphasis> belonging to the programs
which PID are between 100 and 200.</para>

</sect3>

</sect2>

<sect2><title>
Miscellaneous
</title>

<para>
Here are a few additional global options:
</para>

<sect3><title>--sout-all, --no-sout-all</title>

<para>Enable streaming of all ES (default disabled). By default VLC will
only stream one audio ES and one video ES (the first ones). If you
enable sout-all, all ES (audio, video and SPU) will be streamed.</para>

</sect3>

<sect3><title>--sout-keep, --no-sout-keep</title>

<para>Keep sout open (default disabled) : use the same sout instance
across the various playlist items, if possible.</para>

</sect3>

<sect3><title>--no-sout-audio</title>
<para>This options allows to disable audio in the outputted stream.
</para>

</sect3>

<sect3><title>--no-sout-video</title>
<para>This options allows to disable video in the outputted stream.
</para>

</sect3>

</sect2>

<sect2><title>Simplified Syntax</title>

<para>
The stream output also offers a simplified syntax,
with which you can only you use the <emphasis>standard</emphasis> module
main options:
</para>

<screen>
<prompt>% </prompt><userinput>vlc input_stream --sout access/mux:url</userinput>
</screen>

<para>
 where <emphasis>access</emphasis>,
<emphasis>mux</emphasis> and <emphasis>url</emphasis> are as defined in
the options of the standard module.
</para>

</sect2>

</sect1>

<sect1><title>
Examples
</title>

<para>
To understand fully the complex syntax of VLC's
stream output, please look at the examples in the next section.
</para>

</sect1>

</chapter>
