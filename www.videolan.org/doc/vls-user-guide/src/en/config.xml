<?xml version="1.0" encoding="iso8859-1"?>
<chapter id="config"><title id="tconfig">
Configuration


</title>

<para>
VLS reads its configuration from the
<filename>vls.cfg</filename> configuration file, which
is supposed to be located in the current directory or
in <filename>SYSCONF_DIR/videolan/vls</filename> (where
<emphasis>SYSCONF_DIR</emphasis> is <filename>/usr/local/etc</filename>
if you built and installed VLS by hand, or is <filename>/etc</filename>
if you installed the debian binary package)


.</para>

<para>
To write a <filename>vls.cfg</filename> file, use the one supplied
with VLS as a start-point





.</para>

<sect1><title>
General structure


</title>

<para>
VLS configuration file <filename>vls.cfg</filename>
is divided into sections, and each section may contain several
variables


:</para>
<programlisting>

BEGIN "FirstSection"
  Variable1 = "value1"
  Variable2 = "value2"
  [...]
END

BEGIN "SecondSection"
  Variable1 = "value1"
  Variable3 = "value3"
  [...]
END

 

[...]
</programlisting>

<para>
All section names, variable names and values are not
case-sensitive. There can be empty sections and subsections. Comments
must follow a <keycap>#</keycap> character. Some variables have a
default value; it means that you can ommit to declare these variables,
and then they will be given their default value


.</para>

</sect1>

<sect1><title>
Writing a <filename>vls.cfg</filename>


</title>

<para>
Here is an explanation of all the sections you can
find in a <filename>vls.cfg</filename>


:</para>

<sect2><title>Section "VLS"</title>

<para>
This section contains application wide settings


.</para>

<programlisting>
LogFile = "name"
</programlisting>

<para>
Name of VLS log file. If left empty "", then no
logging to files is done. Default is "vls.log"


.</para>

<programlisting>
SystemLog = "[disable|enable]"
</programlisting>

<para>
Logging to the SystemLog. Today, only the SystemLog
using syslogd is implemented: compile with <command>./configure
--enable-syslog</command>


.</para>

<caution><para>
If VLS is started as <command>vlsd</command>, then
the following configuration is mandatory


:</para>

<programlisting>
BEGIN "Vls"
  LogFile   = ""
  SystemLog = "enabled"
  ScreenLog = "disabled"
END
</programlisting>

</caution>

<programlisting>
ScreenLog = "[disable|enable]"
</programlisting>

<para>
Logging to the console


.</para>

<para>
Example


:</para>

<programlisting>
BEGIN "Vls"
  LogFile   = "vls.log"
  SystemLog = "disable"
  ScreenLog = "enable"
END
</programlisting>

</sect2>

<sect2><title>
Section "Groups"


</title>

<para>
In this section, you can define some groups of
users, and which commands these users are allowed to execute. For
each group you want to define, you must add a line in the following
format


:</para>

<programlisting>
groupname = "command1|command2|..."
</programlisting>

<para>
This adds a group "groupname", the users of which
are allowed to execute command1, command2, and so on. At the moment, the
available commands are: help, browse, start, suspend, resume, forward,
rewind, stop, shutdown, logout


.</para>

<para>
Example


:</para>

<programlisting>
BEGIN "Groups"
  monitor = "help|browse|logout"
  master  = "help|browse|start|resume|suspend|forward|rewind|stop|shutdown|logout"
END
</programlisting>

</sect2>

<sect2><title>
Section "Users"


</title>

<para>
This section contains a list of users allowed to
control VLS through an administration interface. For each user, add a
line in the following format


:</para>

<programlisting>
username = "password:groupname"
</programlisting>

<para>
This adds a user "username", who belongs to the
group "groupname" (defined in the "Groups" section) and can log in with
the password "password"


.</para>

<itemizedlist>

<listitem><para>
Under Unix/Linux, the password must be encrypted,
with a tool such as <command>mkpasswd</command>, or with the UNIX
function "crypt"


.</para></listitem>

<listitem><para>
Under Windows, the password must be in clear text


.</para></listitem>

</itemizedlist>

<para>
Example for Unix/Linux


:</para>

<programlisting>
BEGIN "Users"
  monitor = "3BcKWoiQn0vi6:monitor"       # password is 'monitor'
  admin   = "42BKiCguFAL/c:master"        # password is 'Vir4Gv5S'
END
</programlisting>

</sect2>

<sect2><title>
Section "Telnet"


</title>

<para>
In this section, you can configure the telnet
administration interface


.</para>

<programlisting>
LocalPort = "port"
</programlisting>

<para>
Defines which port will be used for the telnet
server. Default port is "9999"


.</para>

<programlisting>
Domain = "domain"
</programlisting>

<para>
Either "inet4" or "inet6" (default is "inet4"). If
you want to use IPv4 addresses, put "inet4", and if you want to use
IPv6, put "inet6"


.</para>

<programlisting>
LocalAddress = "IP address"
</programlisting>

<para>
Defines on which IP address the telnet server will
listen for requests. Default address is "0.0.0.0" (or "0::0" with
IPv6)


.</para>

<para>
Example


:</para>

<programlisting>
BEGIN "Telnet"
  LocalPort = "9999"
END
</programlisting>
</sect2>

<sect2><title>
Section "NativeAdmin"


</title>

<para>
Same syntax as "Telnet". Not used yet


.</para>

</sect2>

<sect2><title>
Section "Inputs"


</title>

<para>
In this section, you can define which inputs you
want to use. For each input you need, add a line in the following
format


:</para>

<programlisting>
InputName = "Type"
</programlisting>

<para>
This adds a input named "InputName", the type
of which is "Type". As explained before, there are several types of
input


:</para>

<itemizedlist>

<listitem><para>

"local" to play a stream from a file or a DVD


,</para></listitem>

<listitem><para>
"video" to play a stream from an MPEG encoding
card


,</para></listitem>

<listitem><para>
"dvb" to play a stream from a DVB card


,</para></listitem>

<listitem><para>
"v4l" to play a stream from a Video4Linux device


.</para></listitem>

</itemizedlist>

<para>
Each input must be configured in its own section
(see next paragraph)


.</para>

<para>
Example


:</para>

<programlisting>
BEGIN "Inputs"
  local1 = "local"
  pvr    = "video"
  dvb1   = "dvb"
  tuner  = "v4l"
END
</programlisting>
</sect2>

<sect2><title>
Inputs configuration


</title>

<para>
For each input declared in the "Inputs" section,
excepted "local" inputs, you must add a section with the same name as
the corresponding input. For instance, if you declared an input "pvr",
there should be one section named "pvr" too. The syntax of such sections
depends on the type of the corresponding input


.</para>

<para>
To configure a local input, you don't have to do
anything. Except when another trickplay strategy must be used


:</para>

<programlisting>
BEGIN "Local1"
  ProgramCount = "1"
  TrickPlay    = "normal"
END
</programlisting>

<para>
"Local1" is the name of the local input you want to
configure. "ProgramCount" is the number of programs assigned to this
input. "TrickPlay" is the trickplay strategy that is used by this input
(default is "normal")


.</para>

<para>
To configure a video input, add a section in the
following format


:</para>

<programlisting>
BEGIN "VideoInputName"
  Device = "device"
  Type   = "type"
END
</programlisting>

<para>
"VideoInputName" is the name of the video input you
want to configure. "Device" is the path of the MPEG encoding card you
want to read from (default is "/dev/video"). "Type" is either "Mpeg2-PS"
or "Mpeg2-TS", depending on your device configuration (default is
"Mpeg2-PS")


.</para>

<para>
Example for a Hauppauge WinTV-PVR-250 card


:</para>

<programlisting>
BEGIN "pvr"
  Device = "/dev/video0"
  Type   = "Mpeg2-PS"
END
</programlisting>

<para>
To configure a dvb input, add a section in the
following format


:</para>

<programlisting>
BEGIN "DvbInputName"
  DeviceNumber = "devicenumber"
  SendMethod   = "0"
END
</programlisting>

<para>
"DvbInputName" is the name of the dvb input you
want to configure. Set "SendMethod" to "0" if you to stream the
complete DVB stream and set it to "1" if you only want to stream
the MPEG audio and video streams (default is "0"). "DeviceNumber"
is the number of the DVB device you want to read from (read
from <filename>/dev/ost/dvr&lt;devicenumber&gt;</filename>,
default is ""). The dvb configuration file is defined by the
driver. You can find it in <filename>$HOME/.dvbrc</filename> for
/dev/dvb/adapter0 or in <filename>$HOME/.dvbrc.X</filename> for
<filename>/dev/dvb/adapterX</filename>

.</para>

<para>
Example


:</para>

<programlisting>
BEGIN "dvb1"
  DeviceNumber = "0"
  TrickPlay = "normal"
END
</programlisting>

</sect2>

<sect2><title>
Section "Channels"


</title>

<para>
In this section, you can define the channels
(outputs) you want to use. For each channel, write a line in the
following format


:</para>

<programlisting>
ChannelName = "Type"
</programlisting>

<para>
This adds a channel named "ChannelName", the type of
which is "Type". "Type" must be either "network" or "file". Like inputs,
channels must be configured in their own section


.</para>

<para>
Example


:</para>

<programlisting>
BEGIN "Channels"
  localhost  = "network"
  client1    = "network"
  client2    = "network"
  multicast1 = "network"
  multicast2 = "network"
  localfile  = "file"
END
</programlisting>

</sect2>

<sect2><title>
Channels configuration


</title>

<para>
For each channel declared in the "Channels" section,
you must add a section with the same name as the corresponding channel.
The syntax of such a section depends on the type of the corresponding
channel


.</para>

<para>
To configure a network channel, add a section in the
following format


:</para>

<programlisting>
BEGIN "NetChannelName"
  Domain    = "Domain"
  Type      = "Type"
  SrcHost   = "SourceHost"
  SrcPort   = "SourcePort"
  DstHost   = "DestHost"
  DstPort   = "DestPort"
  TTL       = "ttl"
  Interface = "Interface"
END
</programlisting>

<itemizedlist>

<listitem><para>
"NetChannelName" is the name of the network channel
you want to configure


.</para></listitem>

<listitem><para>
"Domain" is either "inet4" if you use IPv4
addresses, or "inet6" if you use IPv6 (default is "inet4")


.</para></listitem>

<listitem><para>
"Type" is either "unicast", "broadcast" or
"multicast" (default is "unicast"), depending on what you want to do
(and on your "DstHost" address)


.</para></listitem>

<listitem><para>
"SourceHost" is the IP address (or DNS name) from
which VLS will send the stream


.</para></listitem>

<listitem><para>
"SourcePort" is the UDP port from which the stream
will be sent


.</para></listitem>

<listitem><para>
"DestHost" is the IP address (or DNS name) to which
the stream will be sent


.</para></listitem>

<listitem><para>
"DestPort" is the UDP port to which the stream will
be sent (default is "1234")


.</para></listitem>

<listitem><para>
"TTL" is an option useful only if "Type" is
"multicast" (default value is "0"). You can use it to increase the TTL
of your multicast packets if they have to cross several routers


.</para></listitem>

<listitem><para>
"Interface" is an option only supported under
GNU/Linux, to force the stream to be sent through a given network
interface ("eth1" for instance) To use this option, you must have
super-user permissions


.</para></listitem>

</itemizedlist>

<note><para>
"SrcHost" and "SrcPort" are optional (if you don't
set them, VLS will not 'bind' the socket)


.</para></note>

<para>
To configure a file channel, add a section in the
following format


:</para>

<programlisting>
BEGIN "FileChannelName"
  FileName = "file"
  Append   = "append"
END
</programlisting>

<para>
"FileChannelName" is the name of the file channel
you want to configure. "file" is the name of the file where the stream
will be stored (default is "fileout.ts"). "append" is either "yes" or
"no", and indicates whether VLS will append the stream at the end of the
file, or rewrite it


.</para>

<para>
Example


:</para>

<programlisting>
BEGIN "localhost"         # The client is on the same host as the server
  DstHost = "localhost"
  DstPort = "1234"
END

BEGIN "client1"           # unicast towards client1
  DstHost = "192.168.1.2"
  DstPort = "1234"
END

BEGIN "client2"           # unicast towards client2 in IPv6
  Domain  = "inet6"
  DstHost = "3ffe:ffff::2:12:42"
  DstPort = "1234"
END

BEGIN "multicast1"         # multicast streaming
  Type    = "multicast"
  DstHost = "239.2.12.42"
  DstPort = "1234"
  TTL     = "2"
END

BEGIN "multicast2"         # multicast streaming in IPv6
  Domain  = "inet6"
  Type    = "multicast"
  DstHost = "ff08::1"
  DstPort = "1234"
  TTL     = "12"
END

BEGIN "localfile"         # file output
  FileName = "stream.ts"
  Append   = "no"
END
</programlisting>

<caution><para>
If you use Windows, you should specify the "SrcHost"
and "SrcPort" fields. For example


:</para>

<programlisting>
BEGIN "client1"         # The client is on the same host as the server
  SrcHost = "192.168.1.1"  # IP of VLS
  SrcPort = "1242"         # Source port : the value is not important
  DstHost = "192.168.1.2"  # IP of the client
  DstPort = "1234"
END
</programlisting>

</caution>

</sect2>

<sect2><title>
Programs Configuration


</title>

<para>
As explained before, you must define the programs.
Each one is a MPEG stream (a file, for example). To do this, you must
add an "Input" section in your <filename>vls.cfg</filename> file. Each
"Input" section must have the following syntax


:</para>

<programlisting>
BEGIN "Input"
  FilesPath    = "path"
  ProgramCount = "count"
END
</programlisting>

<para>
"path" is the path where your MPEG files are located
(by default it is the current directory). "count" is the number of
programs defined ("0" by default)


.</para>

<para>
For each program you want to define, you must add a
section with the following format


:</para>

<programlisting>
BEGIN "number"
  Name     = "name"
  Type     = "type"
  FileName = "file"
  Device   = "device"
END
</programlisting>

<itemizedlist>

<listitem><para>
"number" is the program number: the first program
has number 1, the second number 2, and so on.


</para></listitem>

<listitem><para>
"name" is the program name, by which you will tell
VLS to start this program (see next chapter "Running VLS")


.</para></listitem>

<listitem><para>
"type" can be "Mpeg1-PS", "Mpeg2-PS", "Mpeg2-TS",
or "DVD". If your stream is stored in a MPEG file (*.mpeg, *.mpg,
*.vob, and so on...), it is probably in Mpeg1-PS or Mpeg2-PS
format


.</para></listitem>

<listitem><para>
if "type" is set to "Mpeg1-PS", "Mpeg2-PS", or
"Mpeg2-TS", VLS will assume your stream is stored in the file "file", in
the directory "path" ("path" being the variable defined in the "Input"
section)


.</para></listitem>

<listitem><para>
if "type" is "DVD", the variable "Device" will be
used instead of "FileName" (the variable "FilesPath" is not prepended
to the device name !). The variable "Device" is the device of your DVD
drive ("/dev/hdc" or "/dev/cdrom" for instance). You can also play a DVD
copied on a hard disk: then "Device" is the directory where the .vob
files are stored ("/mnt/data/VIDEO_TS" for instance)


.</para></listitem>
</itemizedlist>

<note>
&streamable-mpeg-file;
</note>

<note><para>
In order to play DVDs, you need to compile VLS with
DVD support, which uses libdvdread and libdvdcss. You will need
read <emphasis>and</emphasis> write access rights to the DVD
device


.</para></note>


<para>
Full example


:</para>

<programlisting>
BEGIN "Input"
  FilesPath = "/home/videolan/streams"
  ProgramCount = "4"
END

BEGIN "1"     # MPEG2 stream stored in /home/videolan/streams/Dolby.vob
  Name     = "dolby"
  FileName = "Dolby.vob"
  Type     = "Mpeg2-PS"
END

BEGIN "2"     # another file
  Name     = "canyon"
  FileName = "Dolby_Canyon.vob"
  Type     = "Mpeg2-PS"
END

BEGIN "3"     # DVD
  Name     = "dvd"
  Device   = "/dev/cdrom"
  Type     = "Dvd"
END

BEGIN "4"     # DVD stored on a hard disk
  Name     = "matrix"
  Device   = "/mnt/data/matrix/VIDEO_TS"
  Type     = "Dvd"
END
</programlisting>

</sect2>
</sect1>
</chapter>
