<?xml version="1.0" encoding="UTF-8"?>
<appendix id="http">
  <appendixinfo>
   <title id="thttp">Construire des pages pour l'interface HTTP</title>
  </appendixinfo>
  <title>Construire des pages pour l'interface HTTP</title>

<sect1><title>Introduction</title>

<para>
Cette annexe décrit le language utilisé pour écrire des pages web dynamiques pour l'interface HTTP.</para>

<para>Les pages doivent être placées dans le répertoire share/http soit dans le répertoire de VLC (Windows, Mac), soit dans /usr/share/vlc/share/http, soit dans /usr/local/share/http (soit encore dans n'importe quel endroit contenant des fichiers partagés de vlc).</para>


<para>Certains fichiers sont traités à part
:</para>

<itemizedlist>

<listitem><para>
Les fichiers commencant par '.' ne sont pas exportés.
</para></listitem>
<listitem><para>
Un fichier '.access' sera ouvert et l'interface http s'attendra à trouver à la première ligne un login et un mot de passe (sous la forme login:mot de passe). Ce login et mot de passe seront utilisés pour restreindre l'accès aux fichiers dans le répertoire. Attention : seuls les fichiers situés dans le répertoire seront protégés (les sous-répertoires ne sont pas protégés).
</para></listitem>
<listitem><para>
A '.hosts' file will be opened and the http
interface will expect to find a list of network/mask pairs separated
by new line, for instance 192.168.0.0/255.255.255.0. If this file is
present, then the default behaviour is to deny access from hosts
which don't match any of the network/mask pairs to all the files of the
directory. If the file is not present, then any host has access to the
files of the directory. Be careful that only files in this
directory will be protected. (sub-directories won't be protected.)
</para></listitem>
<listitem><para>
Le fichier &lt;dir&gt;/index.html sera exporté comme &lt;dir&gt; et &lt;dir&gt;/ mais pas comme index.html.
</para></listitem>

</itemizedlist>

<para>
Le type MIME est défini par l'extension du fichier et ne peut pas être spécifié ou modifié pour un fichier donné. Les extensions inconnues auront un type MIME "application/octet-stream".
</para>

<para>
Vous devriez éviter d'exporter de gros fichiers. En effet chaque fichier est d'abord chargé en mémoire avant d'être envoyé au client. Soyez donc  prudents.
</para>

</sect1>

<sect1><title>
Les macros VLC
</title>
<para>  Chaque fois qu'une page .html/.htm est demandée, elle est analysée par VLC avant d'être envoyée. L'analyseur cherche des macros VLC et les exécute ou les substitue. Les arguments URL reçus par la méthode GET peuvent également être interprétés




 .</para>
<para>
Une macro VLC ressemble à :
<emphasis>&lt;vlc id="macro-name" param1="macro-parameters1" param2="macro-parameters2" /&gt;</emphasis>.
</para>
<para>
  "id" est le seul champ nécessaire, param1 et param2 sont facultatifs, et dépendent de la valeur de "id".
</para>

<para>
  Vous devez faire attention à cette syntaxe, VLC n'apprécie pas pas les synataxes invalides (elles peuvent souvent être à la base de plantages).
</para>

<para>
Exemples


:</para>
<para>
Correct : <emphasis>&lt; vlc id="value" param1="version" /gt; </emphasis>

</para>

<para>
Incorrect : <emphasis>&lt;vlc id="value" param1="version" &gt; </emphasis> (il manque le dernier paramètre), <emphasis>&lt;vlc id=value param1="version" /&gt;</emphasis> (il manque ici "" )

</para>

<para>
Les macros valides sont :
</para>

<itemizedlist>

<listitem><para>
<emphasis>control</emphasis> (1 paramètre optionnel)
</para>
</listitem>

<listitem><para>
<emphasis>include</emphasis> (1 parameter)
</para>
</listitem>

<listitem><para>
<emphasis>get</emphasis> (2 paramètres)
</para>
</listitem>

<listitem><para>
<emphasis>set</emphasis> (2 paramètres>
</para>
</listitem>

<listitem><para>
<emphasis>rpn</emphasis> (1 paramètre)
</para>
</listitem>

<listitem><para>
<emphasis>if</emphasis> (1 paramètre optionnel)
</para>
</listitem>

<listitem><para>
<emphasis>else</emphasis> (sans paramètre)
</para>
</listitem>

<listitem><para>
<emphasis>end</emphasis> (sans paramètre)
</para>
</listitem>
<listitem><para>
<emphasis>value</emphasis> (1 paramètre optionnel)
</para>
</listitem>

<listitem><para>
<emphasis>foreach</emphasis> (2 paramètres)
</para>
</listitem>

</itemizedlist>

<para>
Pour des macros puissantes, vous pouvez utiliser ces outils


:</para>

<itemizedlist>

<listitem><para>
L'évaluateur RPN (voir partie II)
</para></listitem>

<listitem><para>
Les piles : Une pile est un endroit où il est possible d'empiler des nombres et des chaînes des caractères, puis de les récupérer. Elles sont souvent utilisées avec l'évaluateur RPN.
</para></listitem>
<listitem><para>
Les variables locales : Il est possible de créer dynamiquement de nouvelles variables et de changer leurs valeurs. Quelques variables locales sont prédéfinies :

<itemizedlist>

<listitem><para>
<emphasis>url_value</emphasis>
: paramètre de l'URL
</para></listitem>

<listitem><para>
<emphasis>url_param</emphasis>
: 1 si url_value n'est pas vide, 0 sinon
</para></listitem>

<listitem><para>
<emphasis>version</emphasis>
: version de VLC
</para></listitem>

<listitem><para>
<emphasis>copyright</emphasis>
: le copyright de VLC
</para></listitem>

<listitem><para>
<emphasis>vlc_compile_time, vlc_compile_by, vlc_compile_host,
vlc_compile_domain, vlc_compiler, vlc_changeset</emphasis>
: information on the VLC build
</para></listitem>

<listitem><para>
<emphasis>stream_position, stream_time, stream_length, stream_state</emphasis>
: information on the currently playing stream
</para></listitem>

<listitem><para>
<emphasis>volume</emphasis>
: current volume setting
</para></listitem>

</itemizedlist>

</para></listitem>

</itemizedlist>

<para>
Remarque: Les piles et les variables locales sont réinitialisées avant l'exécution de la page.
</para>

</sect1>

<sect1><title>
L'évaluateur RPN
</title>

<para>
RPN sont les initiales de Reverse Polish Notation (Notation Polonaise Inversée)
</para>

<sect2><title>
Introduction
</title>

<para>
 La notation RPN peut paraître étrange, mais c'est un moyen simple et rapide d'écrire des expressions. Cela évite également l'usage des parenthèses ( et ).
</para>

<para>
Au lieu d'écrire ( 1 + 2 ) * 5 , il suffit d'écrire 1 2 + 5 * .
</para>

<para>
L'idée sous-jacente est: S'il s'agit d'un nombre ou une chaîne de caractères (utilisant ''), il est placé sur la pile. Si c'est un opérateur (+ par exemple), les arguments sont récupérés sur la pile, l'opération est exécutée, et le résultat est placé sur la pile. Le résultat final de la séquence RPN est la valeur au sommet de la pile.
</para>

<para>
<programlisting>
  pile:       Expression analysée
 vide       1                     1 est placé sur la pile
 1          2                     2 est placé sur la pile
 1 | 2      +                     +: remplace 1 et 2 par 3 au sommet de la pile
 3          5                     5 est placé au sommet de la pile
 3 | 5      *                     *: remplace 3 et 5 par 15 au sommet de la pile
15                                &lt;- résutat
</programlisting>
</para>

</sect2>

<sect2><title>
Opérateurs
</title>

<para> Notation: ST(1) désigne l'élément situé au sommet de la pile, ST(2) le deuxième,... op est un opérateur. 
</para>

<para>
Sont utilisables


:</para>

<itemizedlist>

<listitem><para>
Standard arithmetics operators: <emphasis>+, -, *, /, %</emphasis>:
these ones push the result of ST(1) op ST(2) to the stack
</para></listitem>

<listitem><para>
Binary operators: <emphasis>!</emphasis> (push !ST(1));
<emphasis>^, &amp;, |</emphasis>: push
the result ST(1) op ST(2)
</para></listitem>

<listitem><para>
test: <emphasis>=, &lt;, &lt;=, &gt;, &gt;=</emphasis>: execute ST(1) op
ST(2) and push -1 if true else 0
</para>
</listitem>

<listitem><para>
string functions:

<itemizedlist>

<listitem><para>
<emphasis>strcat</emphasis>
: pushes the result of 'ST(1)ST(2)
</para></listitem>

<listitem><para>
<emphasis>strcmp</emphasis>
: compares ST(1) and ST(2) (0 if equal)
</para></listitem>

<listitem><para>
<emphasis>strncmp</emphasis>
: compares the first ST(1) characters of ST(2) and ST(3) (0 if equal)
</para></listitem>

<listitem><para>
<emphasis>strsub</emphasis>
: extracts characters ST(1) to ST(2) of streaing ST(3)
</para></listitem>

<listitem><para>
<emphasis>strlen</emphasis>
: pushes the length of ST(1)
</para></listitem>

<listitem><para>
<emphasis>str_replace</emphasis>
: replaces string ST(2) with ST(1) in ST(3)
</para></listitem>

<listitem><para>
<emphasis>url_encode</emphasis>
: encodes non-alphanumeric characters of ST(1) as %XX so that they can be
safely passed as GET or POST variables
</para></listitem>

<listitem><para>
<emphasis>url_extract</emphasis>
: performs the reverse operation of url_encode
</para></listitem>

<listitem><para>
<emphasis>addslashes</emphasis>
: protects single quotes (&#039;) and double quotes (&quot;) of ST(1) with
backslashes (\) so that they can be safely passed to a VLC playlist function
</para></listitem>

<listitem><para>
<emphasis>stripslashes</emphasis>
: performs the reverse operation of addslashes
</para></listitem>

<listitem><para>
<emphasis>htmlspecialchars</emphasis>
: encodes &amp;, &quot;, &#039;, &lt; and &gt; of ST(1) as their &amp;stuff;
HTML counterpart, so that they don't interact with HTML tags
</para></listitem>

<listitem><para>
<emphasis>realpath</emphasis>
: parses ST(1) as a filename path, and pushes an absolute path to that file,
removing ~ and ../
</para></listitem>

</itemizedlist>

</para>
</listitem>

<listitem><para>
stack manipulation:

<itemizedlist>

<listitem><para>
<emphasis>dup</emphasis>
: pops ST(1) and pushes the same string twice
</para></listitem>

<listitem><para>
<emphasis>drop</emphasis>
: pops ST(1) and drops it
</para></listitem>

<listitem><para>
<emphasis>swap</emphasis>
: exchanges ST(1) and ST(2)
</para></listitem>

<listitem><para>
<emphasis>flush</emphasis>
: empties the stack
</para></listitem>

</itemizedlist>

</para></listitem>

<listitem><para>
variables manipulation:

<itemizedlist>

<listitem><para>
<emphasis>store</emphasis>
: stores ST(2) in a local variable named ST(1)
</para></listitem>

<listitem><para>
<emphasis>value</emphasis>
: pushes the value of the local variable named ST(1)
</para></listitem>

</itemizedlist>

</para></listitem>

<listitem><para>
player control:

<itemizedlist>

<listitem><para>
<emphasis>vlc_play</emphasis>
: plays the playlist item whose ID is ST(1), and pushes the return value of the
play function (0 in case of success); see playlist functions below
</para></listitem>

<listitem><para>
<emphasis>vlc_stop</emphasis>
: stops the playlist
</para></listitem>

<listitem><para>
<emphasis>vlc_pause</emphasis>
: pauses the playlist
</para></listitem>

<listitem><para>
<emphasis>vlc_next</emphasis>
: plays the next playlist item
</para></listitem>

<listitem><para>
<emphasis>vlc_previous</emphasis>
: plays the previous playlist item
</para></listitem>

<listitem><para>
<emphasis>vlc_seek</emphasis>
: seeks the current input to a location defined in ST(1), for instance
+3m (minutes), -20s, 45%, 1:12, 1h12m25s
</para></listitem>

<listitem><para>
<emphasis>vlc_var_type</emphasis>
: pushes the type of the variable ST(2) of object ST(1);
the type is one of these strings
<emphasis>VLC_VAR_BOOL, VLC_VAR_INTEGER, VLC_VAR_HOTKEY, VLC_VAR_STRING,
VLC_VAR_MODULE, VLC_VAR_FILE, VLC_VAR_DIRECTORY, VLC_VAR_VARIABLE,
VLC_VAR_FLOAT, UNDEFINED</emphasis> (no such variable) or
<emphasis>INVALID</emphasis> (no input stream); the object is one of
<emphasis>VLC_OBJECT_ROOT, VLC_OBJECT_VLC, VLC_OBJECT_INTF, VLC_OBJECT_PLAYLIST,
VLC_OBJECT_INPUT, VLC_OBJECT_VOUT, VLC_OBJECT_AOUT</emphasis> or
<emphasis>VLC_OBJECT_SOUT</emphasis>
</para></listitem>

<listitem><para>
<emphasis>vlc_var_set</emphasis>
: sets variable ST(2) of object ST(1) to ST(3)
</para></listitem>

<listitem><para>
<emphasis>vlc_var_get</emphasis>
: pushes the value of the variable ST(2) of object ST(1)
</para></listitem>

<listitem><para>
<emphasis>vlc_config_type</emphasis>
: pushes the type of the configuration variable ST(1); see
<emphasis>vlc_var_type</emphasis> for a list of types
</para></listitem>

<listitem><para>
<emphasis>vlc_config_set</emphasis>
: sets configuration variable ST(1) to ST(2)
</para></listitem>

<listitem><para>
<emphasis>vlc_config_get</emphasis>
: pushes the value of the configuration variable ST(1)
</para></listitem>

<listitem><para>
<emphasis>vlc_config_save</emphasis>
: saves the modification made to the configuration variables of module
ST(1) to the configuration file (ST(1) may be empty, in which case the
whole configuration is saved) and pushes the return status (0 in case
of success)
</para></listitem>

<listitem><para>
<emphasis>vlc_config_reset</emphasis>
: resets the configuration file to the default value (use with caution)
</para></listitem>

</itemizedlist>

</para></listitem>

<listitem><para>
playlist functions:

<itemizedlist>

<listitem><para>
<emphasis>playlist_add</emphasis>
: adds MRL ST(1) to the playlist, with name ST(2) and returns the playlist ID
associated to this item; special characters must be escaped with
addslashes first; it is very convenient to call 'toto.mpg' playlist_add vlc_play
</para></listitem>

<listitem><para>
<emphasis>playlist_empty</emphasis>
: clears the playlist of all items
</para></listitem>

<listitem><para>
<emphasis>playlist_move</emphasis>
: moves playlist item at position ST(2) to position ST(1)
</para></listitem>

<listitem><para>
<emphasis>playlist_delete</emphasis>
: deletes playlist item ID ST(1)
</para></listitem>

</itemizedlist>

</para></listitem>

</itemizedlist>

</sect2>

</sect1>
<sect1><title>
Les macros
</title>

<sect2><title>
La macro <emphasis>control</emphasis>
</title>

<para><emphasis>
The use of the control macro is now deprecated in favour of the RPN functions
above. The documentation is provided here for the maintainance of
HTML pages still using this old API. The main problem with this API
is that there is no way to retrieve the playlist ID of the last added
item.
</emphasis></para>

<para>
Lorsqu'une page est appelée, des arguments peuvent lui être passés à travers l'URL. (par ex: en utilisant &lt;form&gt;). Ex: http://host:port/page.html?var=value&amp;var2=value2&amp;.. La macro "control" demande à la page de vérifier ces arguments et d'exécuter ceux qui sont autorisés. Le paramètre param1 de cette macro spécifie les commandes autorisées, s'il est vide, toutes les commandes seront permises.
</para>
<para>
Certaines commandes requièrent un argument qui doit également être spécifié dans l'URL.
</para>
<table frame="all">
<title>
Les commandes dans l'URL
</title>

<tgroup cols="3">
<thead>
<row>
 <entry>Nom</entry>
 <entry>Argument</entry>
 <entry>
    Description
    
    
 </entry>
</row>
</thead>
<tbody>
<row>
 <entry>play</entry>
 <entry>
    item (entier)
    
    
 </entry>
 <entry>
    Lit l'élément spécifié de la playlist
    
    
 </entry>
</row>
<row>
 <entry>stop</entry><entry/>
 <entry>
    stop
    
    
 </entry>
</row>
<row>
 <entry>pause</entry><entry/>
 <entry>Pause</entry>
</row>
<row>
 <entry>next</entry><entry/>
 <entry>
    Avance jusqu'au prochain élément de la playlist
    
    
 </entry>
</row>
<row>
 <entry>previous</entry><entry/>
 <entry>
     Recule à l'élément précédent de la playlist
    
    
 </entry>
</row>
<row>
 <entry>add</entry>
 <entry>
    mrl (chaine de caractères)
    
    
 </entry>
 <entry>
    Ajoute un MRL (Ressource de Localistion de Média) à la playlist
    
    
 </entry>
</row>
<row>
 <entry>delete</entry>
 <entry>
    item (entier)
    
    
 </entry>
 <entry>
    Supprime l'élément de playlist spécifié, ou la liste d'éléments de la playlist
    
    
 </entry>
</row>
<row>
 <entry>empty</entry><entry/>
 <entry>
    En utilisant la playlist (liste de lecture)
    
    
 </entry>
</row>
<row>
 <entry>close</entry>
    <entry>
        id (hexa)
        
        
    </entry>
 <entry>
    Ferme une connection spécifique
    
    
 </entry>
</row>
<row>
 <entry>shutdown</entry><entry/>
 <entry>
    Quitter VLC
    
    
 </entry>
</row>
</tbody>
</tgroup>
</table>

<para>
Par exemple, vous pouvez restreindre l'exécution de la commande <command>shutdown</command> à une page protégée (par un fichier <emphasis>.acces</emphasis>), tout en utilisant la macro control dans toutes les pages non protégées.
</para>
</sect2>

<sect2><title>
The <emphasis>include</emphasis> macro
</title>

<para>
This macro is replaced by the contents of the file param1. If the file
contains vlc macros, they are correctly parsed and replaced.
</para>

</sect2>

<sect2><title>
La macro <emphasis>get</emphasis>
</title>

<para>
Cette macro sera remplacée par la valeur de la variable de configuration dont le nom est stocké dans param1 et dont le type est donné par param2.
</para>

<para>
param1 doit être le nom d'une variable de configuration existante. param2 doit être le type de la variable. Il devra être choisi parmi <emphasis>int</emphasis>, <emphasis>float</emphasis>, ou <emphasis>string</emphasis>.

 
</para>

<para>
Exemple: &lt;vlc id="get" param1="sout" param2="string" /&gt; sera remplacé par la valeur de sout dans la page.
</para>

</sect2>
<sect2><title>
La macro <emphasis>set</emphasis>
</title>

<para>
Cette macro permet de définir la valeur d'une variable de configuration. Le nom est donné par param1 et le type par param2 (comme pour get). La valeur est définie à partir de l'URL en utilisant le nom donné dans param1.
</para>

<para>
Par exemple, si player.html contient &lt;vlc id="set" param1="sout" param2="string" /&gt;, et si vous demandez la page <emphasis> http://host:ip/player.html?sout=sout_value</emphasis>, la variable sout sera égale à "sout_value". Si l'URL ne contient pas sout, rien ne sera fait.
</para>

</sect2>
<sect2><title>
La macro <emphasis>rpn</emphasis>
</title>
<para>
Cette macro vous permet d'interpréter les commandes RPN.
(Voir II).
</para>
</sect2>

<sect2><title>
La macro <emphasis>if, else, end</emphasis>
</title>

<para>
Cette macro vous permet de controler la validité de la
page HTML.
</para>

<para>
Si param1 n'est pas vide, il est tout d'abbord exectuté avec
l'évaluateur RPN. Si le premier élément de la liste n'est pas 0, le résultat
du test est vrai, faux sinon...
</para>

<para>

<programlisting>  &lt;vlc id="if" param1="1 2 =" /&gt;
    &lt;!-- Jamais atteint --&gt;
 &lt;vlc id="else" /&gt;
    &lt;p&gt; Test vrai: 1 n'est pas égal à 2&lt;/p&gt;
 &lt;vlc id="end" /&gt;
</programlisting>

</para>

<para>
Vous pouvez aussi n'utiliser que "if" et "end".
</para>

</sect2>

<sect2><title>
La macro <emphasis>value</emphasis>
</title>

<para>
Si param1 n'est pas vide, il est tout d'abord exécuté
avec l'évaluateur RPN. La macro est remplacée par la valeur du premier
élément de la pile.
</para>

<para>
Remarque: Si l'élément est le nom d'une variable locale, sa valeur
sera affichée à la place de son nom.
</para>

</sect2>

<sect2><title>
La macro <emphasis>foreach,end</emphasis>
</title>

<para>

param1 est le nom de la variable utilisée pour la boucle. param2 est le nom de l'ensemble construit :

</para>
<itemizedlist>

<listitem><para>
<emphasis>integer</emphasis>: prenedre le premier élément de la pile pour construire une suite d'entiers. L'élément pile devra être une chaîne de caractères de caractères de la forme: <emphasis>premier:dernier[:pas][,premier2:dernier2[:pas2][,...]</emphasis> (Ex: 1:5:2,6:8:1 sera interprété comme 1,3,5,6,7,8)
</para></listitem>

<listitem><para>
<emphasis>directory</emphasis>: prendre le premier élément de la pile comme répertoire de base et construire un ensemble intrinsèque de noms de fichiers. Chaque élément possède les champs suivants:
</para>

<itemizedlist>

<listitem><para>
name: fichier/nom de répertoire
</para></listitem>

<listitem><para>
type: "directory" ou "file" ou "unknown"
</para></listitem>

<listitem><para>
size: taille du fichier
</para></listitem>

<listitem><para>
date
</para></listitem>

</itemizedlist>

</listitem>

<listitem><para>
playlist: ensemble basé sur la playlist avec les champs suivants: current est égal à 1 si l'élément est actuellement sélectionné, 0 sinon. index est la valeur d'indexation, qui peut être utilisée par les commandes lecture ou supprimer. name est le nom de l'élément.
</para></listitem>

<listitem><para>
"information": Create information for the current
playing stream. name is the name of the category, value is its value,
info is a new set that can be parsed with a new foreach (subfields of
info are name and value).
</para></listitem>



<listitem><para>
input variables such as "program", "title", "chapter", "audio-es",
"video-es" and "spu-es": Create lists for the current
playing stream. Every list has the following fields:

<itemizedlist>

<listitem><para>
name: item name (language for elementary streams, tracks, etc.) to
display in places where a human-readable format is preferred
</para></listitem>

<listitem><para>
id: item ID to pass to the RPN function vlc_var_set, and returned by
vlc_var_get
</para></listitem>

<listitem><para>
selected: 1 if the item is selected, 0 otherwise
</para></listitem>

</itemizedlist>

</para></listitem>

<listitem><para>
le nom d'une variable foreach si c'est un ensemble d'ensembles de valeurs.
</para>

<programlisting>&lt;vlc id="foreach" param1="cat" param2="informations" /&gt;
                &lt;p&gt; &lt;vlc id="value" param1="cat.name" /&gt;
                &lt;ul&gt;
                &lt;vlc id="foreach" param1="info" param2="cat.info" /&gt;
                    &lt;li&gt;
                    &lt;vlc id="value" param1="info.name" /&gt; :
                            &lt;vlc id="value" param1="info.value" /&gt;
                    &lt;/li&gt;
                &lt;vlc id="end" /&gt;
                &lt;/ul&gt;
            &lt;vlc id="end" /&gt;
</programlisting>

</listitem>

</itemizedlist>

<para>Pour plus de détails, regardez le répertoire
share/http situé à la racine de l'arboresence de VLC...
</para>

</sect2>
</sect1>

</appendix>
