<?xml version="1.0" encoding="iso8859-1"?>
<chapter id="usesout"><title id="tusesout">
Advanced use of VLC's stream output
(transcoding, multiple streaming, etc...)
</title>

<sect1><title>
The syntax
</title>

<para>
Please refer to the <emphasis>command line
interface</emphasis> chapter of the VLC user guide to learn the syntax
of VLC's stream output. You can find the VLC user guide on the <ulink url="http://www.videolan.org/doc/">documentation page</ulink>.
</para>

</sect1>

<sect1><title>
Examples
</title>

<sect2><title>
Transcoding
</title>

<para>
Transcode the input stream and send it to a
multicast IP address with the associated SAP announce:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#transcode{vcodec=mp4v,acodec=mpga,vb=800,ab=128,deinterlace}:
standard{access=udp,mux=ts,url=239.255.12.42,sap,name="TestStream"}'</userinput>
</screen>

<para>
 Display the input stream, transcode it and send it
to a multicast IP address with the associated SAP announce:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#duplicate{dst=display,dst=
"transcode{vcodec=mp4v,acodec=mpga,vb=800,ab=128,deinterlace}:
standard{access=udp,mux=ts,url=239.255.12.42,sap,name="TestStream"}"}'</userinput>
</screen>

<para>
Transcode the input stream, display the transcoded
stream and send it to a multicast IP address with the associated SAP
announce:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#transcode{vcodec=mp4v,acodec=mpga,vb=800,ab=128,deinterlace}:
duplicate{dst=display,dst=standard{access=udp,mux=ts,url=239.255.12.42,sap,name="TestStream"}}'</userinput>
</screen>

</sect2>

<sect2><title>
Multiple streaming
</title>

<para>
Send a stream to a multicast IP address and a
unicast IP address:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#duplicate{dst=
standard{access=udp,mux=ts,url=239.255.12.42,sap,name="TestStream"},
dst=standard{access=udp,mux=ts,url=192.168.1.2}}'</userinput>
</screen>

<para>
Display the stream and send it to two unicast IP
addresses:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#duplicate{dst=display,dst=
standard{access=udp,mux=ts,url=192.168.1.12},
dst=standard{access=udp,mux=ts,url=192.168.1.42}}'</userinput>
</screen>

<para>Send two specific programs from a multiple program input stream:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv multiple_program_input_stream --sout '#duplicate{dst=
"1° dst", select="program=12345", dst="2° dst", select="program=43221"}'</userinput>
</screen>

</sect2>

<sect2><title>

Transcoding and multiple streaming
</title>

<para>
Transcode the input stream, display the transcoded
stream and send it to a multicast IP address with the associated SAP
announce and an unicast IP address:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#transcode{vcodec=mp4v,acodec=mpga,vb=800,ab=128,deinterlace}:
duplicate{dst=display,dst=standard{access=udp,mux=ts,url=239.255.12.42,sap,name="TestStream"},
dst=standard{access=udp,mux=ts,url=192.168.1.2}}'</userinput>
</screen>

<para>
Display the input stream, transcode it and send it
to two unicast IP addresses:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#duplicate{dst=display,
dst="transcode{vcodec=mp4v,acodec=mpga,vb=800,ab=128}:
duplicate{dst=standard{access=udp,mux=ts,url=192.168.1.2},
dst=standard{access=udp,mux=ts,url=192.168.1.12}"}'</userinput>
</screen>

<para>
Send the input stream to a multicast IP address
and the transcoded stream to another multicast IP address with the
associated SAP announces:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#duplicate{dst=
standard{access=udp,mux=ts,url=239.255.1.2,sap,name="OriginalStream"},
dst="transcode{vcodec=mp4v,acodec=mpga,vb=800,ab=128}:
standard{access=udp,mux=ts,url=239.255.1.3,sap,name="TranscodedStream"}"}'</userinput>
</screen>

</sect2>

<sect2><title>
HTTP streaming
</title>

<para>
Stream in HTTP:
</para>

<itemizedlist>

<listitem><para>
on the server, run:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#standard{access=http,mux=ogg,url=server.example.org:8080}'</userinput>
</screen>

</listitem>

<listitem><para>
on the client(s), run:
</para>

<screen>
<prompt>% </prompt><userinput>vlc http://server.example.org:8080</userinput>
</screen>

</listitem>

</itemizedlist>

<para>
Transcode and stream in HTTP:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#transcode{vcodec=mp4v,acodec=mpga,vb=800,ab=128}:
standard{access=http,mux=ogg,url=server.example.org:8080}'</userinput>
</screen>

<para>
For example, if you want to stream an audio CD in
Ogg/Vorbis over HTTP:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv cdda:/dev/cdrom --sout '#transcode{acodec=vorb,ab=128}:
standard{access=http,mux=ogg,url=server.example.org:8080}'</userinput>
</screen>

</sect2>

<sect2><title>
RTP streaming
</title>

<para>
Stream in RTP:
</para>

<itemizedlist>

<listitem><para>
on the server, run:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#rtp{dst=192.168.0.12,port=1234,sdp=http://server.example.org:8080/test.sdp}'</userinput>
</screen>

</listitem>

<listitem><para>
on the client(s), run:
</para>

<screen>
<prompt>% </prompt><userinput>vlc http://server.example.org:8080/test.sdp</userinput>
</screen>

</listitem>

</itemizedlist>

</sect2><sect2><title>
Use the <emphasis>es</emphasis> module
</title>

<para>
Separate audio and video in two PS files:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout
'#es{access=file,mux=ps,url_audio=audio-%c.%m,url_video=video-%c.%m}'</userinput>
</screen>

<para>
Extract the audio track of the input stream to a TS
file:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#es{access_audio=file,mux_audio=ts,url_audio=audio-%c.%m}'</userinput>
</screen>

<para>
 Stream in unicast the audio track on a port and the
video track on another port:
</para>

<itemizedlist>

<listitem><para>
on the server side:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout
'#es{access=rtp,mux=ts,url_audio=192.168.1.2:1212,url_video=192.168.1.2:1213}'</userinput>
</screen>

</listitem>

<listitem><para>
on the client side: to receive the audio:
</para>

<screen>
<prompt>% </prompt><userinput>vlc udp:@:1212</userinput>
</screen><para>
to receive the video:
</para>

<screen>
<prompt>% </prompt><userinput>vlc udp:@:1213</userinput>
</screen>

</listitem>

</itemizedlist>

<para>
Stream in multicast the video and dump the audio in
a file:
</para>

<screen>
<prompt>% </prompt><userinput>vlc -vvv input_stream --sout '#es{access_video=udp,mux_video=ts,url_video=239.255.12.42,
access_audio=file,mux_audio=ps,url_audio=audio-%c.%m}'</userinput>
</screen>

<note><para>
You can also combine the <emphasis>es</emphasis>
module with the other modules to set-up even more complex
solution.
</para></note>

</sect2>
</sect1>
</chapter>
